# -*- coding: utf-8 -*-
"""ААА практика Классы - допуск  - Эрденко.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QfafSFi6RLaM9mf3hpEuekBQgrmva7wQ
"""

# -*- coding: utf-8 -*-
'''ААА дз Классы - Эрденко.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QfafSFi6RLaM9mf3hpEuekBQgrmva7wQ

Домашка 3 - выполнил Эрденко Александр

# Задание

Реализуйте класс CountVectorizer, имеющий
- метод fit_transform
- метод get_feature_names

Условия:
- пользоваться внешними пакетами запрещено
- решение должно быть в *.py файлах
- не должно быть замечаний PEP8
- решение загружено на github
- если умеешь, то напиши проверки/тесты
'''

class CountVectorizer:
  def fit_transform(self, corpus):
    words_list = []
    for text in corpus:
        words = text.lower().split()
        for word in words:
            if word not in words_list:
                words_list.append(word)

    self.feature_names = words_list
    feature_dict = {word: idx for idx, word in enumerate(self.feature_names)}

    count_matrix = []
    for text in corpus:
        words = text.lower().split()
        row = [0] * len(self.feature_names)
        for word in words:
            if word in feature_dict:
                row[feature_dict[word]] += 1
        count_matrix.append(row)

    return count_matrix

  def get_feature_names(self):
    return self.feature_names

def main() -> None:
    corpus = ['Crock Pot Pasta Never boil pasta again',
              'Pasta Pomodoro Fresh ingredients Parmesan to taste' ]

    vectorizer = CountVectorizer()
    count_matrix = vectorizer.fit_transform(corpus)

    print('Пример 1')
    print(vectorizer.get_feature_names())
    print(count_matrix)
    print(end ='\n')

    corpus1 = ['Всем моим братьям салам',
               'Салам всем моим братьям',
               'Я устал искать себе какую-то работу']

    vectorizer1 = CountVectorizer()
    count_matrix1 = vectorizer1.fit_transform(corpus1)

    print('Пример 2')
    print(vectorizer1.get_feature_names())
    print(count_matrix1)
    print(end ='\n')

    corpus2 = ['Идет медведь по лесу',
               'Видит, машина горит',
               'Сел в нее и сгорел']

    vectorizer2 = CountVectorizer()
    count_matrix2 = vectorizer2.fit_transform(corpus2)

    print('Пример 3')
    print(vectorizer2.get_feature_names())
    print(count_matrix2)
    print(end ='\n')

    corpus3 = ['3 крокодила',
               '2 крокодила',
               '2 бегемота',
               '2 крокодила и 3 бегемота']

    vectorizer3 = CountVectorizer()
    count_matrix3 = vectorizer3.fit_transform(corpus3)

    print('Пример 4')
    print(vectorizer3.get_feature_names())
    print(count_matrix3)
    print(end ='\n')

if __name__ == '__main__':
    main()

corpus = ['Crock Pot Pasta Never boil pasta again',
              'Pasta Pomodoro Fresh ingredients Parmesan to taste' ]

vectorizer = CountVectorizer()
count_matrix = vectorizer.fit_transform(corpus)

count_matrix

#Задание 2
def tf_transform(count_matrix):
  tf_matrix = []
  for document in count_matrix:
    all_terms = sum(document)
    tf_vec = [cnt_term / all_terms for cnt_term in document]
    tf_matrix.append(tf_vec)
  return tf_matrix

tf_transform(count_matrix)

#Задание 3
import numpy as np

def idf_transform(
    count_matrix: list[list[int]]
) -> list[float]:

  idf = []
  all_docs = len(count_matrix)

  for entry in zip(*count_matrix):
    docs_with_word = sum([1 for doc in entry if doc > 0])

    idf.append(
        np.log((all_docs + 1) / (docs_with_word + 1)) + 1
    )

  return idf

idf_transform(count_matrix)

#Задание 4
class TfidTransformer:

  @staticmethod
  def fit_transform(count_matrix):
    tfidf_matrix = []
    idf = idf_transform(count_matrix)
    for vector in count_matrix:
      tf = tf_transform([vector])
      tfidf_matrix.append([round(x * y, 3) for x, y in zip(idf, tf[0])])
    return tfidf_matrix



TfidTransformer().fit_transform(count_matrix)

#Задание 5

class TfidVectorizer(CountVectorizer):

  def __init__(self):
    super().__init__()
    self.vectorizer = TfidTransformer

  def fit_transform(self, corpus):
    count_matrix = super().fit_transform(corpus)
    return self.vectorizer.fit_transform(count_matrix)

corpus = ['Crock Pot Pasta Never boil pasta again',
              'Pasta Pomodoro Fresh ingredients Parmesan to taste' ]

vectorizer = TfidVectorizer()
tfid_matrix = vectorizer.fit_transform(corpus)
print(vectorizer.get_feature_names())
print(tfid_matrix)