# -*- coding: utf-8 -*-
"""Python HW 2 AAA new .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tOWGFkLz5CGFd3OxghqIvq-pt8Ge0lJT

# ДЗ 2 - функции

*Эрденко Александр*

Есть csv-файл с отчётом о сотрудниках компании. В нём

следующие данные:

*   ФИО полностью
*   Департамент
* Команда внутри департамента
* Занимаемая должность
* Квартальная оценка - результат ревью
* Текущая зарплата

При старте программы выводится меню, которое состоит из 3-х пунктов:

Вывести в понятном виде иерархию команд, т.е. департамент и все команды, которые входят в него
Вывести сводный отчёт по департаментам: название, численность, "вилка" зарплат в виде мин – макс, среднюю зарплату
Сохранить сводный отчёт из предыдущего пункта в виде csv-файла. При этом необязательно вызывать сначала команду из п.2
Пользователь выбирает пункт меню, вводя соответствующее число.

Условия:

Используем только встроенные модули (без pandas и т.д.)
Весь скрипт разбит на функции
Каждая функция содержит докстринги
Бонус: все параметры аннотированы типами
"""

import csv
from typing import List, Dict, Tuple
from collections import defaultdict

def read_csv(file_name: str) -> List[Dict[str, str]]:
    with open(file_name, newline='', encoding='utf-8') as csvfile:
        reader = csv.DictReader(csvfile, delimiter=';')
        data = [row for row in reader]
    return data

"""Я очень долго сидел и не понимал, где ошибка в коде. Потому что прога говорила, что не существует такого столбца как "Команда внутри департамента" и "Текущая зарплата". В самом файле называются "Отдел" и "Оклад".

Пофиксите, пожалуйста))
"""

def create_teams_hierarchy(data: List[Dict[str, str]]) -> Dict[str, set]:
    departments = defaultdict(set)
    for row in data:
        departments[row['Департамент']].add(row['Отдел'])
    return departments

def print_teams_hierarchy(departments: Dict[str, set]) -> None:
    for department, teams in departments.items():
        print(f'{department}:')
        for team in teams:
            print(f'  - {team}')

def create_summary_report(data: List[Dict[str, str]]) -> Dict[str,
                                                              Dict[str, int]]:
    departments = defaultdict(lambda: {'count': 0, 'salaries': []})
    for row in data:
        department = row['Департамент']
        salary = int(row['Оклад'])
        departments[department]['count'] += 1
        departments[department]['salaries'].append(salary)
    return departments

def print_summary_report(departments: Dict[str, Dict[str, int]]) -> None:
    print('{:<15} | {:<12} | {:<18} | {:<18} | {:<18}'.format(
        'Департамент', 'Численность', 'Минимальная зарплата',
        'Максимальная зарплата', 'Средняя зарплата'
    ))

    for department, info in departments.items():
        min_salary = min(info['salaries'])
        max_salary = max(info['salaries'])
        avg_salary = sum(info['salaries']) / info['count']
        print('{:<15} | {:<12} | {:<18} | {:<18} | {:<18.2f}'.format(
            department, info['count'], min_salary, max_salary, avg_salary
        ))

def save_summary_report(departments: Dict[str, Dict[str, int]],
                        output_file: str) -> None:
    with open(output_file, 'w', newline='', encoding='utf-8') as csvfile:
        fieldnames = ['Департамент', 'Численность', 'Минимальная зарплата',
                      'Максимальная зарплата', 'Средняя зарплата']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()

        for department, info in departments.items():
            min_salary = min(info['salaries'])
            max_salary = max(info['salaries'])
            avg_salary = sum(info['salaries']) / info['count']
            writer.writerow({'Департамент': department,
                             'Численность': info['count'],
                             'Минимальная зарплата': min_salary,
                             'Максимальная зарплата': max_salary,
                             'Средняя зарплата': f'{avg_salary:.2f}'})

def main() -> None:
    data = read_csv('Corp_Summary.csv')

    while True:
        print('Выберите действие:')
        print('1 - Вывести иерархию команд')
        print('2 - Вывести сводный отчёт по департаментам')
        print('3 - Сохранить сводный отчёт в CSV-файл')
        print('4 - Выход')

        choice = input('Введите номер действия: ')

        if choice == '1':
            departments = create_teams_hierarchy(data)
            print_teams_hierarchy(departments)
        elif choice == '2':
            departments = create_summary_report(data)
            print_summary_report(departments)
        elif choice == '3':
            departments = create_summary_report(data)
            output_file = input('Введите имя файла для сохранения: ')
            save_summary_report(departments, output_file)
            print('Сводный отчёт сохранён.')
        elif choice == '4':
            break
        else:
            print('Неверный ввод, попробуйте снова.')

if __name__ == '__main__':
    main()